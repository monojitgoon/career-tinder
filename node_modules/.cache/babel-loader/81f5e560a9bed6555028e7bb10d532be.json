{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { register } from '@progress/kendo-ripple';\n\nvar Ripple =\n/** @class */\nfunction (_super) {\n  __extends(Ripple, _super);\n\n  function Ripple() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._element = null;\n\n    _this.removeListeners = function () {};\n\n    _this.registerListeners = function () {\n      var root = _this._element;\n\n      _this.removeListeners();\n\n      var callback = register(root, [{\n        selector: '.k-button:not(li)'\n      }, {\n        selector: '.k-list>.k-item',\n        options: {\n          global: true\n        }\n      }, {\n        selector: '.k-checkbox-label,.k-radio-label'\n      }, {\n        selector: '.k-checkbox,.k-radio',\n        options: {\n          events: ['focusin'],\n          container: function container(el) {\n            if (/\\b(k-checkbox|k-radio)\\b/.test(el.className)) {\n              return el.nextElementSibling;\n            }\n          }\n        }\n      }]);\n      _this.removeListeners = callback;\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  Ripple.prototype.componentDidMount = function () {\n    this.registerListeners();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Ripple.prototype.componentDidUpdate = function () {\n    var disabled = this.props.disabled;\n\n    if (disabled) {\n      this.removeListeners();\n    } else {\n      this.registerListeners();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Ripple.prototype.componentWillUnmount = function () {\n    this.removeListeners();\n  };\n  /**\n   * @hidden\n   */\n\n\n  Ripple.prototype.render = function () {\n    var _this = this;\n\n    var classNames = this.props.className ? 'k-ripple-container' + ' ' + this.props.className : 'k-ripple-container';\n    return React.createElement(\"span\", {\n      className: classNames,\n      ref: function ref(el) {\n        _this._element = el;\n      }\n    }, this.props.children);\n  };\n  /**\n   * @hidden\n   */\n\n\n  Ripple.propTypes = {\n    disabled: PropTypes.bool\n  };\n  return Ripple;\n}(React.PureComponent);\n\nexport { Ripple };","map":null,"metadata":{},"sourceType":"module"}